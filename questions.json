[
  {
    "id": 1,
    "problem_name": "Sort by Set Bit Count",
    "slug": "sort-by-set-bit-count1153",
    "difficulty": "Easy",
    "tags": {
      "company_tags": [],
      "topic_tags": ["Arrays", "Sorting", "Data Structures", "Algorithms"]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/sort-by-set-bit-count1153/1",
    "problem_description": "Given an array of integers, sort the array (in descending order) according to count of set bits in binary representation of array elements. \nNote: For integers having same number of set bits in their binary representation, sort according to their position in the original array i.e., a stable sort.\n  Example 1:\nInput: \narr[] = {5, 2, 3, 9, 4, 6, 7, 15, 32};\nOutput:\n15 7 5 3 9 6 2 4 32\nExplanation:\nThe integers in their binary\nrepresentation are:\n15 - 1111\n7 - 0111\n5 - 0101\n3 - 0011\n9 - 1001\n6 - 0110\n2 - 0010\n4 - 0100\n32 - 10000\nhence the non-increasing sorted order is:\n{15}, {7}, {5, 3, 9, 6}, {2, 4, 32}\n  Example 2:\nInput: \narr[] = {1, 2, 3, 4, 5, 6};\nOutput: \n3 5 6 1 2 4\nExplanation:\n3 - 0011\n5 - 0101\n6 - 0110\n1 - 0001\n2 - 0010\n4 - 0100\nhence the non-increasing sorted order is\n{3, 5, 6}, {1, 2, 4}\n\n\nYour Task:\nYou don't need to print anything, printing is done by the driver code itself. You just need to complete the function sortBySetBitCount() which takes the array arr[] and its size N as inputs and sort the array arr[] inplace. Use of extra space is prohibited.\n  Expected Time Complexity: O(N.log(N))\nExpected Auxiliary Space: O(1)\n\nConstraints:\n1 \u2264 N \u2264 105\n1 \u2264 A[i] \u2264 106"
  },
  {
    "id": 2,
    "problem_name": "Smallest Subset with Greater Sum",
    "slug": "smallest-subset-with-greater-sum",
    "difficulty": "Easy",
    "tags": {
      "company_tags": [],
      "topic_tags": [
        "Arrays",
        "Greedy",
        "Sorting",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/smallest-subset-with-greater-sum/1",
    "problem_description": "You are given an array Arr of size N containing non-negative integers. Your task is to choose the minimum number of elements such that their sum should be greater than the sum of the rest of the elements of the array.\nExample 1:\nInput:\nN = 4 \nArr[] = {2, 17, 7, 3}\nOutput:\n1\nExplanation:\nIf we only select element 17, the sum of the\nrest of the elements will be (2+3+7)=12.\nSo the answer will be 1.\nExample 2:\nInput:\nN = 4\nArr = {20, 12, 18, 4}\nOutput:\n2\nExplanation:\nIf we select 12 and 18 from the array,\nthe sum will be (12+18) = 30 and the sum of\nthe rest of the elements will be (20+4) = 24.\nSo, the answer will be 2. We can also\nselect 20 and 18 as well.\n  Your Task:\nYou don't need to read input or print anything. Your task is to complete the function minSubset() which takes the array Arr[] and its size N as inputs and returns the minimum number of elements to be selected.\n  Expected Time Complexity: O(N log N)\nExpected Auxiliary Space: O(1)\n  Constraints:\n1 <= N <= 105\n1 <= Arr[i] <= 109\nArray may contain duplicate elements. "
  },
  {
    "id": 3,
    "problem_name": "Searching in an array where adjacent differ by at most k",
    "slug": "searching-in-an-array-where-adjacent-differ-by-at-most-k0456",
    "difficulty": "Easy",
    "tags": {
      "company_tags": [],
      "topic_tags": [
        "Arrays",
        "Searching",
        "CPP",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/searching-in-an-array-where-adjacent-differ-by-at-most-k0456/1",
    "problem_description": "A step array is an array of integers where each element has a difference of at most k with its neighbor. Given a key x, we need to find the index value of x if multiple elements exist, and return the first occurrence of the key.\nExample 1:\nInput : arr[ ] = {4, 5, 6, 7, 6}, K = 1 \n and X = 6\nOutput : 2\nExplanation:\nIn an array arr 6 is present at index 2.\nSo, return 2.\n\nExample 2:\nInput : arr[ ] = {20 40 50}, K = 20 \n and X = 70\nOutput : -1\n  Your Task:\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function search() that takes an array (arr), sizeOfArray (n), an integer value X, another integer value K, and return an integer displaying the index of the element X in the array arr. If the element is not present in the array return -1. The driver code takes care of the printing.\nExpected Time Complexity: O(N).\nExpected Auxiliary Space: O(1).\n  Constraints:\n1 \u2264 N \u2264 105\n1 \u2264 K \u2264 102\n1 \u2264 arr[i], X \u2264 105"
  },
  {
    "id": 4,
    "problem_name": "Merge two binary Max heaps",
    "slug": "merge-two-binary-max-heap0144",
    "difficulty": "Easy",
    "tags": {
      "company_tags": [],
      "topic_tags": ["Arrays", "Heap", "Data Structures"]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/merge-two-binary-max-heap0144/1",
    "problem_description": "Given two binary max heaps as arrays, merge the given heaps to form a new max heap.\n  Example 1:\nInput : \nn = 4 m = 3\na[] = {10, 5, 6, 2}, \nb[] = {12, 7, 9}\nOutput : \n{12, 10, 9, 2, 5, 7, 6}\nExplanation :\n    Your Task:  \nYou don't need to read input or print anything. Your task is to complete the function mergeHeaps() which takes the array a[], b[], its size n and m, as inputs and return the merged max heap. Since there can be multiple solutions, therefore, to check for the correctness of your solution, your answer will be checked by the driver code and will return 1 if it is correct, else it returns 0.\n  Expected Time Complexity: O(n.Logn)\nExpected Auxiliary Space: O(n + m)\n  Constraints:\n1 <= n, m <= 105\n1 <= a[i], b[i] <= 2*105\n \n   "
  },
  {
    "id": 5,
    "problem_name": "Pairs with certain difference",
    "slug": "pairs-with-specific-difference1533",
    "difficulty": "Easy",
    "tags": {
      "company_tags": [],
      "topic_tags": [
        "Arrays",
        "Dynamic Programming",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/pairs-with-specific-difference1533/1",
    "problem_description": "Given an array of integers, arr[] and a number, K.You can pair two numbers of the array if the difference between them is strictly less than K. The task is to find the maximum possible sum of such disjoint pairs (i.e., each element of the array can be used at most once). The Sum of P pairs is the sum of all 2P elements of pairs.\n  Example 1:\nInput : \narr[] = {3, 5, 10, 15, 17, 12, 9}\nK = 4\nOutput : \n62\nExplanation :\nThen disjoint pairs with difference less\nthan K are, (3, 5), (10, 12), (15, 17)\nmax sum which we can get is \n3 + 5 + 10 + 12 + 15 + 17 = 62\nNote that an alternate way to form \ndisjoint pairs is,(3, 5), (9, 12), (15, 17)\nbut this pairing produces less sum.\n  Example 2:\nInput : \narr[] = {5, 15, 10, 300}\nK = 12\nOutput : \n25\n  Your Task:  \nYou don't need to read, input, or print anything. Your task is to complete the function maxSumPairWithDifferenceLessThanK() which takes the array arr[], its size N, and an integer K as inputs and returns the maximum possible sum of disjoint pairs.\n  Expected Time Complexity: O(N. log(N))\nExpected Auxiliary Space: O(N)\n  Constraints:\n1 \u2264 N \u2264 105\n0 \u2264 K \u2264 105\n1 \u2264 arr[i] \u2264 104"
  },
  {
    "id": 6,
    "problem_name": "Minimum Sum of Absolute Differences of Pairs",
    "slug": "minimum-sum-of-absolute-differences-of-pairs",
    "difficulty": "Easy",
    "tags": {
      "company_tags": [],
      "topic_tags": [
        "Arrays",
        "Greedy",
        "Sorting",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/minimum-sum-of-absolute-differences-of-pairs/1",
    "problem_description": "You are given two arrays A and B of equal length N. Your task is to pair each element of array A to an element in array B, such that the sum of the absolute differences of all the pairs is minimum.\nExample 1:\nInput:\nN = 4\nA = {4,1,8,7}\nB = {2,3,6,5}\nOutput:\n6\nExplanation:\nIf we take the pairings as (1,2), (4,3),\n(7,5), and (8,6), the sum will be S =\n|1 - 2| + |4 - 3| + |7 - 5| + |8 - 6| = 6.\nIt can be shown that this is the minimum sum we can get.\n  Example 2:\nInput:\nN = 3\nA = {4,1,2}\nB = {2,4,1}\nOutput:\n0\nExplanation:\nIf we take the pairings as (4,4), (1,1), and\n(2,2), the sum will be S = |4 - 4| + |1 - 1| +\n|2 - 2| = 0. It can be shown that this is the\nminimum sum we can get.\n  Your Task:\nYou don't need to read input or print anything. Your task is to complete the function findMinSum() which takes the arrays A[], B[], and its size N as inputs and returns the minimum sum of the absolute differences of the pairs.\n  Expected Time Complexity: O(N*log(N))\nExpected Auxiliary Space: O(1)\n  Constraints:\n1 <= N <= 105\n0 <= A[i] <= 109\n0 <= B[i] <= 109\nSum of N over all test cases doesn't exceeds 106"
  },
  {
    "id": 7,
    "problem_name": "Kadane's Algorithm",
    "slug": "kadanes-algorithm-1587115620",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Zoho",
        "Flipkart",
        "Morgan Stanley",
        "Accolite",
        "Amazon",
        "Microsoft",
        "Samsung",
        "Snapdeal",
        "24*7 Innovation Labs",
        "Citrix",
        "D-E-Shaw",
        "FactSet",
        "Hike",
        "Housing.com",
        "MetLife",
        "Ola Cabs",
        "Oracle",
        "Payu",
        "Teradata",
        "Visa",
        "Walmart",
        "Adobe",
        "Google",
        "Arcesium"
      ],
      "topic_tags": [
        "Arrays",
        "Dynamic Programming",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/kadanes-algorithm-1587115620/1",
    "problem_description": "Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.\n\nExample 1:\nInput:\nN = 5\nArr[] = {1,2,3,-2,5}\nOutput:\n9\nExplanation:\nMax subarray sum is 9\nof elements (1, 2, 3, -2, 5) which \nis a contiguous subarray.\nExample 2:\nInput:\nN = 4\nArr[] = {-1,-2,-3,-4}\nOutput:\n-1\nExplanation:\nMax subarray sum is -1 \nof element (-1)\n\nYour Task:\nYou don't need to read input or print anything. The task is to complete the function maxSubarraySum() which takes Arr[] and N as input parameters and returns the sum of subarray with maximum sum.\n\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(1)\n\nConstraints:\n1 \u2264 N \u2264 106\n-107 \u2264 A[i] \u2264 107"
  },
  {
    "id": 8,
    "problem_name": "Minimum number of jumps",
    "slug": "minimum-number-of-jumps-1587115620",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Moonfrog Labs",
        "Flipkart",
        "Amazon",
        "Microsoft",
        "Housing.com",
        "Walmart",
        "Adobe",
        "Google"
      ],
      "topic_tags": ["Arrays", "Greedy", "Data Structures", "Algorithms"]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/minimum-number-of-jumps-1587115620/1",
    "problem_description": "Given an array of N integers arr[] where each element represents the maximum length of the jump that can be made forward from that element. This means if arr[i] = x, then we can jump any distance y such that y \u2264 x.\nFind the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.\n\nNote: Return -1 if you can't reach the end of the array.\n\nExample 1:\nInput:\nN = 11 \narr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} \nOutput: 3 \nExplanation: \nFirst jump from 1st element to 2nd \nelement with value 3. Now, from here \nwe jump to 5th element with value 9, \nand from here we will jump to the last.\nExample 2:\nInput :\nN = 6\narr = {1, 4, 3, 2, 6, 7}\nOutput: 2 \nExplanation: \nFirst we jump from the 1st to 2nd element \nand then jump to the last element.\n\nYour task:\nYou don't need to read input or print anything. Your task is to complete function minJumps() which takes the array arr and it's size N as input parameters and returns the minimum number of jumps. If not possible return -1.\n\nExpected Time Complexity: O(N)\nExpected Space Complexity: O(1)\n\nConstraints:\n1 \u2264 N \u2264 107\n0 \u2264 arri \u2264 107"
  },
  {
    "id": 9,
    "problem_name": "Majority Element",
    "slug": "majority-element-1587115620",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Flipkart",
        "Accolite",
        "Amazon",
        "Microsoft",
        "D-E-Shaw",
        "Google",
        "Nagarro",
        "Atlassian"
      ],
      "topic_tags": [
        "Arrays",
        "Searching",
        "Greedy",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/majority-element-1587115620/1",
    "problem_description": "Given an array A of N elements. Find the majority element in the array. A majority element in an array A of size N is an element that appears more than N/2 times in the array.\n  Example 1:\nInput:\nN = 3 \nA[] = {1,2,3} \nOutput:\n-1\nExplanation:\nSince, each element in \n{1,2,3} appears only once so there \nis no majority element.\nExample 2:\nInput:\nN = 5 \nA[] = {3,1,3,3,2} \nOutput:\n3\nExplanation:\nSince, 3 is present more\nthan N/2 times, so it is \nthe majority element.\n\nYour Task:\nThe task is to complete the function majorityElement() which returns the majority element in the array. If no majority exists, return -1.\n  Expected Time Complexity: O(N).\nExpected Auxiliary Space: O(1).\n  Constraints:\n1 \u2264 N \u2264 107\n0 \u2264 Ai \u2264 106"
  },
  {
    "id": 10,
    "problem_name": "Kth smallest element",
    "slug": "kth-smallest-element5635",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "VMWare",
        "Accolite",
        "Amazon",
        "Microsoft",
        "Snapdeal",
        "Hike",
        "Adobe",
        "Google",
        "ABCO",
        "Cisco"
      ],
      "topic_tags": [
        "Arrays",
        "Searching",
        "Sorting",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/kth-smallest-element5635/1",
    "problem_description": "Given an array arr[] and an integer K where K is smaller than size of array, the task is to find the Kth smallest element in the given array. It is given that all array elements are distinct.\nNote :-  l and r denotes the starting and ending index of the array.\nExample 1:\nInput:\nN = 6\narr[] = 7 10 4 3 20 15\nK = 3\nOutput : 7\nExplanation :\n3rd smallest element in the given \narray is 7.\nExample 2:\nInput:\nN = 5\narr[] = 7 10 4 20 15\nK = 4\nOutput : 15\nExplanation :\n4th smallest element in the given \narray is 15.\nYour Task:\nYou don't have to read input or print anything. Your task is to complete the function kthSmallest() which takes the array arr[], integers l and r denoting the starting and ending index of the array and an integer K as input and returns the Kth smallest element.\n    Expected Time Complexity: O(n)\nExpected Auxiliary Space: O(log(n))\nConstraints:\n1 <= N <= 105\n1 <= arr[i] <= 105\n1 <= K <= N\n "
  },
  {
    "id": 11,
    "problem_name": "Minimize the Heights II",
    "slug": "minimize-the-heights3351",
    "difficulty": "Medium",
    "tags": {
      "company_tags": ["Microsoft", "Adobe"],
      "topic_tags": ["Arrays", "Greedy", "Data Structures", "Algorithms"]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/minimize-the-heights3351/1",
    "problem_description": "Given an array arr[] denoting heights of N towers and a positive integer K.\nFor each tower, you must perform exactly one of the following operations exactly once.\nIncrease the height of the tower by K\nDecrease the height of the tower by K\nFind out the minimum possible difference between the height of the shortest and tallest towers after you have modified each tower.\nYou can find a slight modification of the problem here.\nNote: It is compulsory to increase or decrease the height by K for each tower. After the operation, the resultant array should not contain any negative integers.\n\nExample 1:\nInput:\nK = 2, N = 4\nArr[] = {1, 5, 8, 10}\nOutput:\n5\nExplanation:\nThe array can be modified as\n{1+k, 5-k, 8-k, 10-k} = {3, 3, 6, 8}.\nThe difference between \nthe largest and the smallest is 8-3 = 5.\nExample 2:\nInput:\nK = 3, N = 5\nArr[] = {3, 9, 12, 16, 20}\nOutput:\n11\nExplanation:\nThe array can be modified as\n{3+k, 9+k, 12-k, 16-k, 20-k} -> {6, 12, 9, 13, 17}.\nThe difference between \nthe largest and the smallest is 17-6 = 11. \n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function getMinDiff() which takes the arr[], n, and k as input parameters and returns an integer denoting the minimum difference.\n\nExpected Time Complexity: O(N*logN)\nExpected Auxiliary Space: O(N)\n\nConstraints\n1 \u2264 K \u2264 104\n1 \u2264 N \u2264 105\n1 \u2264 Arr[i] \u2264 105"
  },
  {
    "id": 12,
    "problem_name": "Count Inversions",
    "slug": "inversion-of-array-1587115620",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Flipkart",
        "Amazon",
        "Microsoft",
        "MakeMyTrip",
        "Adobe",
        "BankBazaar",
        "Myntra"
      ],
      "topic_tags": [
        "Arrays",
        "Divide and Conquer",
        "Sorting",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1",
    "problem_description": "Given an array of integers. Find the Inversion Count in the array. \nInversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. \nFormally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.\n  Example 1:\nInput: N = 5, arr[] = {2, 4, 1, 3, 5}\nOutput: 3\nExplanation: The sequence 2, 4, 1, 3, 5 \nhas three inversions (2, 1), (4, 1), (4, 3).\nExample 2:\nInput: N = 5\narr[] = {2, 3, 4, 5, 6}\nOutput: 0\nExplanation: As the sequence is already \nsorted so there is no inversion count.\nExample 3:\nInput: N = 3, arr[] = {10, 10, 10}\nOutput: 0\nExplanation: As all the elements of array \nare same, so there is no inversion count.\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function inversionCount() which takes the array arr[] and the size of the array as inputs and returns the inversion count of the given array.\n\nExpected Time Complexity: O(NLogN).\nExpected Auxiliary Space: O(N).\n\nConstraints:\n1 \u2264 N \u2264 5*105\n1 \u2264 arr[i] \u2264 1018"
  },
  {
    "id": 13,
    "problem_name": "Trapping Rain Water",
    "slug": "trapping-rain-water-1587115621",
    "difficulty": "Medium",
    "tags": {
      "company_tags": ["Flipkart", "Amazon", "Microsoft", "Google"],
      "topic_tags": [
        "Arrays",
        "Dynamic Programming",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/trapping-rain-water-1587115621/1",
    "problem_description": "Given an array arr[] of N non-negative integers representing the height of blocks. If width of each block is 1, compute how much water can be trapped between the blocks during the rainy season. \n  Example 1:\nInput:\nN = 6\narr[] = {3,0,0,2,0,4}\nOutput:\n10\nExplanation:\nExample 2:\nInput:\nN = 4\narr[] = {7,4,0,9}\nOutput:\n10\nExplanation:\nWater trapped by above \nblock of height 4 is 3 units and above \nblock of height 0 is 7 units. So, the \ntotal unit of water trapped is 10 units.\nExample 3:\nInput:\nN = 3\narr[] = {6,9,9}\nOutput:\n0\nExplanation:\nNo water will be trapped.\n\nYour Task:\nYou don't need to read input or print anything. The task is to complete the function trappingWater() which takes arr[] and N as input parameters and returns the total amount of water that can be trapped.\n\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(N)\n\nConstraints:\n3 < N < 106\n0 < Ai < 108"
  },
  {
    "id": 14,
    "problem_name": "Minimum Platforms",
    "slug": "minimum-platforms-1587115620",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Paytm",
        "Amazon",
        "Microsoft",
        "D-E-Shaw",
        "Hike",
        "Walmart",
        "Adobe",
        "Google",
        "Boomerang Commerce",
        "Zillious",
        "Atlassian"
      ],
      "topic_tags": [
        "Arrays",
        "Greedy",
        "Sorting",
        "Binary Search",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/minimum-platforms-1587115620/1",
    "problem_description": "Given arrival and departure times of all trains that reach a railway station. Find the minimum number of platforms required for the railway station so that no train is kept waiting.\nConsider that all the trains arrive on the same day and leave on the same day. Arrival and departure time can never be the same for a train but we can have arrival time of one train equal to departure time of the other. At any given instance of time, same platform can not be used for both departure of a train and arrival of another train. In such cases, we need different platforms.\n\nExample 1:\nInput: n = 6 \narr[] = {0900, 0940, 0950, 1100, 1500, 1800}\ndep[] = {0910, 1200, 1120, 1130, 1900, 2000}\nOutput: 3\nExplanation: \nMinimum 3 platforms are required to \nsafely arrive and depart all trains.\nExample 2:\nInput: n = 3\narr[] = {0900, 1100, 1235}\ndep[] = {1000, 1200, 1240}\nOutput: 1\nExplanation: Only 1 platform is required to \nsafely manage the arrival and departure \nof all trains. \n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function findPlatform() which takes the array arr[] (denoting the arrival times), array dep[] (denoting the departure times) and the size of the array as inputs and returns the minimum number of platforms required at the railway station such that no train waits.\nNote: Time intervals are in the 24-hour format(HHMM) , where the first two characters represent hour (between 00 to 23 ) and the last two characters represent minutes (this may be > 59).\n\nExpected Time Complexity: O(nLogn)\nExpected Auxiliary Space: O(n)\n\nConstraints:\n1 \u2264 n \u2264 50000\n0000 \u2264 A[i] \u2264 D[i] \u2264 2359"
  },
  {
    "id": 15,
    "problem_name": "Find Missing And Repeating",
    "slug": "find-missing-and-repeating2512",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Amazon",
        "Samsung",
        "D-E-Shaw",
        "Goldman Sachs",
        "MAQ Software"
      ],
      "topic_tags": ["Arrays", "Data Structures"]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/find-missing-and-repeating2512/1",
    "problem_description": "Given an unsorted array Arr of size N of positive integers. One number 'A' from set {1, 2,....,N} is missing and one number 'B' occurs twice in array. Find these two numbers.\nExample 1:\nInput:\nN = 2\nArr[] = {2, 2}\nOutput: 2 1\nExplanation: Repeating number is 2 and \nsmallest positive missing number is 1.\nExample 2:\nInput:\nN = 3\nArr[] = {1, 3, 3}\nOutput: 3 2\nExplanation: Repeating number is 3 and \nsmallest positive missing number is 2.\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function findTwoElement() which takes the array of integers arr and n as parameters and returns an array of integers of size 2 denoting the answer ( The first index contains B and second index contains A.)\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(1)\nConstraints:\n2 \u2264 N \u2264 105\n1 \u2264 Arr[i] \u2264 N"
  },
  {
    "id": 16,
    "problem_name": "Maximum Product Subarray",
    "slug": "maximum-product-subarray3604",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Morgan Stanley",
        "Amazon",
        "Microsoft",
        "OYO Rooms",
        "D-E-Shaw",
        "Google"
      ],
      "topic_tags": [
        "Arrays",
        "Dynamic Programming",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/maximum-product-subarray3604/1",
    "problem_description": "Given an array Arr[] that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.\nExample 1:\nInput:\nN = 5\nArr[] = {6, -3, -10, 0, 2}\nOutput: 180\nExplanation: Subarray with maximum product\nis [6, -3, -10] which gives product as 180.\nExample 2:\nInput:\nN = 6\nArr[] = {2, 3, 4, 5, -1, 0}\nOutput: 120\nExplanation: Subarray with maximum product\nis [2, 3, 4, 5] which gives product as 120.\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function maxProduct() which takes the array of integers arr and n as parameters and returns an integer denoting the answer.\nNote: Use 64-bit integer data type to avoid overflow.\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(1)\nConstraints:\n1 \u2264 N \u2264 500\n-102 \u2264 Arri \u2264 102"
  },
  {
    "id": 17,
    "problem_name": "Maximum of all subarrays of size k",
    "slug": "maximum-of-all-subarrays-of-size-k3101",
    "difficulty": "Medium",
    "tags": {
      "company_tags": ["Flipkart", "Amazon", "Microsoft", "Directi", "Google"],
      "topic_tags": [
        "sliding-window",
        "Arrays",
        "Queue",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1",
    "problem_description": "Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.\nExample 1:\nInput:\nN = 9, K = 3\narr[] = 1 2 3 1 4 5 2 3 6\nOutput: \n3 3 4 5 5 5 6 \nExplanation: \n1st contiguous subarray = {1 2 3} Max = 3\n2nd contiguous subarray = {2 3 1} Max = 3\n3rd contiguous subarray = {3 1 4} Max = 4\n4th contiguous subarray = {1 4 5} Max = 5\n5th contiguous subarray = {4 5 2} Max = 5\n6th contiguous subarray = {5 2 3} Max = 5\n7th contiguous subarray = {2 3 6} Max = 6\nExample 2:\nInput:\nN = 10, K = 4\narr[] = 8 5 10 7 9 4 15 12 90 13\nOutput: \n10 10 10 15 15 90 90\nExplanation: \n1st contiguous subarray = {8 5 10 7}, Max = 10\n2nd contiguous subarray = {5 10 7 9}, Max = 10\n3rd contiguous subarray = {10 7 9 4}, Max = 10\n4th contiguous subarray = {7 9 4 15}, Max = 15\n5th contiguous subarray = {9 4 15 12}, \nMax = 15\n6th contiguous subarray = {4 15 12 90},\nMax = 90\n7th contiguous subarray = {15 12 90 13}, \nMax = 90\nYour Task:  \nYou dont need to read input or print anything. Complete the function max_of_subarrays() which takes the array, N and K as input parameters and returns a list of integers denoting the maximum of every contiguous subarray of size K.\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(k)\nConstraints:\n1 \u2264 N \u2264 105\n1 \u2264 K \u2264 N\n0 \u2264 arr[i] \u2264 107"
  },
  {
    "id": 18,
    "problem_name": "Stock buy and sell",
    "slug": "stock-buy-and-sell-1587115621",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Paytm",
        "Flipkart",
        "Accolite",
        "Amazon",
        "Microsoft",
        "D-E-Shaw",
        "MakeMyTrip",
        "Ola Cabs",
        "Oracle",
        "Walmart",
        "Goldman Sachs",
        "Directi",
        "Intuit",
        "Google",
        "Quikr",
        "Salesforce",
        "Pubmatic",
        "Sapient",
        "Swiggy",
        "Media.net"
      ],
      "topic_tags": [
        "Arrays",
        "Dynamic Programming",
        "Greedy",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/stock-buy-and-sell-1587115621/1",
    "problem_description": "The cost of stock on each day is given in an array A[] of size N. Find all the segments of days on which you buy and sell the stock so that in between those days for which profit can be generated.\nNote: Since there can be multiple solutions, the driver code will print 1 if your answer is correct, otherwise, it will return 0. In case there's no profit the driver code will print the string \"No Profit\" for a correct solution.\n\nExample 1:\nInput:\nN = 7\nA[] = {100,180,260,310,40,535,695}\nOutput:\n1\nExplanation:\nOne possible solution is (0 3) (4 6)\nWe can buy stock on day 0,\nand sell it on 3rd day, which will \ngive us maximum profit. Now, we buy \nstock on day 4 and sell it on day 6.\nExample 2:\nInput:\nN = 5\nA[] = {4,2,2,2,4}\nOutput:\n1\nExplanation:\nThere are multiple possible solutions.\none of them is (3 4)\nWe can buy stock on day 3,\nand sell it on 4th day, which will \ngive us maximum profit.\n\nYour Task:\nThe task is to complete the function stockBuySell() which takes an array of A[] and N as input parameters and finds the days of buying and selling stock. The function must return a 2D list of integers containing all the buy-sell pairs i.e. the first value of the pair will represent the day on which you buy the stock and the second value represent the day on which you sell that stock. If there is No Profit, return an empty list.\n\nExpected Time Complexity: O(N)\nExpected Auxiliary Space: O(N)\n\nConstraints:\n2 \u2264 N \u2264 106\n0 \u2264 A[i] \u2264 106"
  },
  {
    "id": 19,
    "problem_name": "Triplet Sum in Array",
    "slug": "triplet-sum-in-array-1587115621",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Accolite",
        "Amazon",
        "Microsoft",
        "OYO Rooms",
        "Samsung",
        "CarWale"
      ],
      "topic_tags": [
        "two-pointer-algorithm",
        "Arrays",
        "Hash",
        "Sorting",
        "Data Structures",
        "Algorithms"
      ]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/triplet-sum-in-array-1587115621/1",
    "problem_description": "Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.\n\nExample 1:\nInput:\nn = 6, X = 13\narr[] = [1 4 45 6 10 8]\nOutput:\n1\nExplanation:\nThe triplet {1, 4, 8} in \nthe array sums up to 13.\nExample 2:\nInput:\nn = 5, X = 10\narr[] = [1 2 4 3 6]\nOutput:\n1\nExplanation:\nThe triplet {1, 3, 6} in \nthe array sums up to 10.\n\nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function find3Numbers() which takes the array arr[], the size of the array (n) and the sum (X) as inputs and returns True if there exists a triplet in the array arr[] which sums up to X and False otherwise.\n\nExpected Time Complexity: O(n2)\nExpected Auxiliary Space: O(1)\n\nConstraints:\n1 \u2264 n \u2264 103\n1 \u2264 A[i] \u2264 105"
  },
  {
    "id": 20,
    "problem_name": "Spirally traversing a matrix",
    "slug": "spirally-traversing-a-matrix-1587115621",
    "difficulty": "Medium",
    "tags": {
      "company_tags": [
        "Paytm",
        "Flipkart",
        "Morgan Stanley",
        "Microsoft",
        "OYO Rooms",
        "Snapdeal",
        "D-E-Shaw",
        "MakeMyTrip",
        "Oracle",
        "MAQ Software",
        "Adobe",
        "nearbuy",
        "Nagarro",
        "BrowserStack",
        "Salesforce"
      ],
      "topic_tags": ["Arrays", "Matrix", "Data Structures"]
    },
    "problem_url": "https://practice.geeksforgeeks.org/problems/spirally-traversing-a-matrix-1587115621/1",
    "problem_description": "Given a matrix of size r*c. Traverse the matrix in spiral form.\nExample 1:\nInput:\nr = 4, c = 4\nmatrix[][] = {{1, 2, 3, 4},\n  {5, 6, 7, 8},\n  {9, 10, 11, 12},\n  {13, 14, 15,16}}\nOutput: \n1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10\nExplanation:\nExample 2:\nInput:\nr = 3, c = 4 \nmatrix[][] = {{1, 2, 3, 4},\n  {5, 6, 7, 8},\n  {9, 10, 11, 12}}\nOutput: \n1 2 3 4 8 12 11 10 9 5 6 7\nExplanation:\nApplying same technique as shown above, \noutput for the 2nd testcase will be \n1 2 3 4 8 12 11 10 9 5 6 7.\n\nYour Task:\nYou dont need to read input or print anything. Complete the function spirallyTraverse() that takes matrix, r and c as input parameters and returns a list of integers denoting the spiral traversal of matrix. \n\nExpected Time Complexity: O(r*c)\nExpected Auxiliary Space: O(r*c), for returning the answer only.\n\nConstraints:\n1 <= r, c <= 100\n0 <= matrixi <= 100"
  }
]
